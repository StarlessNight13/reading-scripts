name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to fetch all history for tagging
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Get current version from package.json
        id: package_version
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l ${{ steps.package_version.outputs.PACKAGE_VERSION }})
          if [ -z "$TAG_EXISTS" ]; then
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.package_version.outputs.PACKAGE_VERSION }} already exists. Skipping tag and release creation."
          fi
      - name: Bump version and create tag (if tag doesn't exist)
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        id: tag_version
        run: |
          echo "Creating tag: v${{ steps.package_version.outputs.PACKAGE_VERSION }}"
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git tag v${{ steps.package_version.outputs.PACKAGE_VERSION }}
          echo "NEW_VERSION=v${{ steps.package_version.outputs.PACKAGE_VERSION }}" >> $GITHUB_OUTPUT
          git push --tags
      - name: Create Release (if tag doesn't exist)
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.NEW_VERSION }}
          release_name: Release ${{ steps.tag_version.outputs.NEW_VERSION }}
          body: |
            ## What's New
            (Add release notes here)
          draft: false
          prerelease: false
